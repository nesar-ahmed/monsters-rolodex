{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","src","monster","id","alt","name","email","CardList","monsters","map","App","state","searchField","fetch","then","response","json","users","setState","catch","error","console","log","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACtC,OACE,qBAAKC,UAAU,aAAf,SACE,uBACEA,UAAU,SACVC,KAAK,SACLH,YAAaA,EACbI,SAAUH,QCPLI,G,MAAO,SAACC,GACnB,OACE,sBAAKJ,UAAU,iBAAf,UACE,qBACEK,IAAG,+BAA0BD,EAAME,QAAQC,GAAxC,0BACHC,IAAI,iBAEN,mCAAOJ,EAAME,QAAQG,KAArB,OACA,kCAAML,EAAME,QAAQI,MAApB,YCPOC,G,MAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACzB,OACE,qBAAKZ,UAAU,YAAf,SACGY,EAASC,KAAI,SAAAP,GAAO,OACnB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCiCZO,G,wDAnCb,WAAYV,GAAQ,IAAD,8BACjB,cAAMA,IACDW,MAAQ,CACXH,SAAU,GACVI,YAAa,IAJE,E,gEASE,IAAD,OAElBC,MADY,8CAETC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACV,SAAUS,OACvCE,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,Q,+BAGtB,IAAD,SAC2BG,KAAKZ,MAA/BH,EADD,EACCA,SAAUI,EADX,EACWA,YACZY,EAAmBhB,EAASiB,QAAO,SAAAvB,GAAO,OAC9CA,EAAQG,KAAKqB,cAAcC,SAASf,EAAYc,kBAElD,OACE,sBAAK9B,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CACEF,YAAY,kBACZC,aAAc,SAAAiC,GAAC,OAAI,EAAKV,SAAS,CAACN,YAAagB,EAAEC,OAAOC,WAE1D,cAAC,EAAD,CAAUtB,SAAUgB,W,GA9BVO,IAAMC,YCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cd0c8075.chunk.js","sourcesContent":["import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => {\n  return (\n    <div className=\"search-box\">\n      <input\n        className=\"search\"\n        type=\"search\"\n        placeholder={placeholder}\n        onChange={handleChange}\n      />\n    </div>\n  )\n}\n","import React from 'react';\nimport './card.styles.css';\n\nexport const Card = (props) => {\n  return (\n    <div className=\"card-container\">\n      <img\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n        alt=\"random robot\"\n      />\n      <h3> { props.monster.name } </h3>\n      <p> { props.monster.email } </p>\n    </div>\n  )\n}\n","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './card-list.styles.css';\n\nexport const CardList = ({ monsters }) => {\n  return (\n    <div className=\"card-list\">\n      {monsters.map(monster => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </div>\n  )\n}\n","import React from 'react';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport { CardList } from './components/card-list/card-list.component';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      monsters: [],\n      searchField: '',\n    }\n  }\n\n  // Life cycle methods [automatically called by react]\n  componentDidMount() {\n    const url = 'https://jsonplaceholder.typicode.com/users';\n    fetch(url)\n      .then(response => response.json())\n      .then(users => this.setState({monsters: users}))\n      .catch(error => console.log(error));\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => (\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    ))\n    return (\n      <div className=\"App\">\n        <h1> Monster Rolodex </h1>\n        <SearchBox\n          placeholder=\"Search monsters\"\n          handleChange={e => this.setState({searchField: e.target.value})}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}